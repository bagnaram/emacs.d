* mccarthy

Configuration that is specific to /mccarthy/.

** Beamer Presentations

#+BEGIN_SRC emacs-lisp
  (when (require 'ox-latex nil :no-error)
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))

#+END_SRC

** Common Lisp

This is used to configure an alternate lookup for Common Lisp
documentation.  For example ~C-c C-d h~ will lookup the symbol
at /point/.

#+BEGIN_SRC emacs-lisp
  (defvar got/common-lisp-hyperspec-root
    "file:/Users/gordy/Documents/HyperSpec-7-0/HyperSpec/"
    "My local copy of the Common Lisp Hyperspec")
#+END_SRC
** Ditaa Support in Org Mode

- ~brew install ditaa~
- Make note of the location of the ~ditaa*.jar~ file.

#+BEGIN_SRC emacs-lisp
  (let ((ditaa-jar-path "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar"))
    (if (file-exists-p ditaa-jar-path)
        (progn
          (message "Setting org-ditaa-jar-path to '%s'" ditaa-jar-path)
          (setq org-ditaa-jar-path ditaa-jar-path))
      (message (concat "Unable to location ditaa jar file at path: "
                       ditaa-jar-path))))

#+END_SRC

- Then just create a SRC block with the following attributes: =ditaa :file <FILENAME>=
- You just do your text drawings in the SRC block (using artist-mode)
- Evaluate via ~C-c C-c~
- Toggle inline images on/off via ~C-c C-x C-v~
** PlantUML Support in Org Mode

- ~brew install plantuml~
- Make not of the location of the ~plantuml*.jar~ file.

#+BEGIN_SRC emacs-lisp
  (let ((plantuml-jar-path "/usr/local/Cellar/plantuml/8048/plantuml.8048.jar"))
    (if (file-exists-p plantuml-jar-path)
        (progn
          (message "Setting org-plantuml-jar-path to '%s'" plantuml-jar-path)
          (setq org-plantuml-jar-path plantuml-jar-path))
      (message (concat "Unable to location plantuml jar file at path: "
                       plantuml-jar-path))))

#+END_SRC

** Font Customization

I recently installed a couple of cool Adobe open source fonts:

- [[http://store1.adobe.com/cfusion/store/html/index.cfm?event%3DdisplayFontPackage&code%3D1960][Source Code Pro]]
- [[https://store1.adobe.com/cfusion/store/html/index.cfm?event%3DdisplayFontPackage&code%3D1959][Source Sans Pro]]

The following updates the default font and size when running on my
laptop.

#+BEGIN_SRC emacs-lisp
  (let* ((font-family "Source Code Pro")
         (font-description (concat font-family "-14")))
    (when (find-font (font-spec :name font-family))
      (set-frame-font font-description nil t)))
#+END_SRC

*** References

- [[http://www.emacswiki.org/emacs/SetFonts][Emacs Wiki - Set Fonts]]
** mu4e configuration

- [[http://www.djcbsoftware.nl/code/mu/mu4e/index.html][mu4e 0.9.9.6 user manual]]

*** Set Defaults

I define some /mu4e/ settings in my ~.private.el~ file.  If you have
just checked out this repo, you will not have this file.  Here I
define variables that are introduced in the file and, if necessary,
give them defaults that won't cause any code to break.

#+BEGIN_SRC emacs-lisp
  (unless (boundp 'got/mu4e-account-alist)
    (defvar got/mu4e-account-alist nil))
#+END_SRC

*** Bookmarks

Change default or add new bookmarks by updating the variable
~mu4e-bookmarks~. I do this in my ~.private.el~ file.

*** Marks

| mark for/as | keybinding  | description                   |
|-------------+-------------+-------------------------------|
| 'something' | <insert>    | mark now, decide later        |
| delete      | D, <delete> | delete                        |
| flag        | +           | mark as 'flagged' ('starred') |
| move        | m           | move to some maildir          |
| read        | !           | mark as read                  |
| refile      | r           | mark for refiling             |
| trash       | d           | move to the trash folder      |
| untrash     | =           | remove 'trash' flag           |
| unflag      | -           | remove 'flagged' mark         |
| unmark      | u           | remove mark at point          |
| unmark all  | U           | remove all marks              |
| unread      | ?           | marks as unread               |

*** TODO Document installation and setup for fetchmail, procmail, and offlineimap
*** Load mu4e

#+BEGIN_SRC emacs-lisp
  (unless (require 'mu4e nil 'noerror)
    (message "Package mu4e not found.  Will skip mu4e configuration"))
     
#+END_SRC
*** View message in Browser

#+BEGIN_SRC emacs-lisp
  ;;; message view action
  (defun mu4e-msgv-action-view-in-browser (msg)
    "View the body of the message in a web browser."
    (interactive)
    (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
          (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
      (unless html (error "No html part for this message"))
      (with-temp-file tmpfile
        (insert
         "<html>"
         "<head><meta http-equiv=\"content-type\""
         "content=\"text/html;charset=UTF-8\">"
         html))
      (browse-url (concat "file://" (file-truename tmpfile)))))
  (when (boundp 'mu4e-view-actions)
    (add-to-list 'mu4e-view-actions
                 '("View in browser" . mu4e-msgv-action-view-in-browser) t))
#+END_SRC

*** Basic Settings

#+BEGIN_SRC emacs-lisp
  (setq
   mu4e-maildir "~/Maildir"                        ;; top-level Maildir
   mu4e-attachment-dir "/Users/gordy/Downloads"    ;; folder for attachments
   mu4e-view-prefer-html t                         ;; set t to use html if available
   mu4e-use-fancy-chars t                          ;; use nicer thread markers
   mu4e-view-show-images t                         ;; show images inline
   mu4e-view-image-max-width 800                   ;; limit max image sizE
   message-send-mail-function 'smtpmail-send-it    ;; command to sent mail
   smtpmail-debug-info nil                         ;; set t to enable smtp debug info
   message-kill-buffer-on-exit t                   ;; kill old buffers
   mu4e-view-show-addresses t                      ;; show email addresses with names
   )
  (when (fboundp 'imagemagick-render-type)
    (imagemagick-register-types))

#+END_SRC
*** Converting Text to html

#+BEGIN_SRC emacs-lisp
  (defun jme/convert-to-shr-html ()
            "Use shr to convert the current body to html."
            (let ((dom (libxml-parse-html-region (point-min) (point-max))))
              (erase-buffer)
              (shr-insert-document dom)
              (goto-char (point-min))))

  (setq mu4e-html2text-command #'jme/convert-to-shr-html)
#+END_SRC

*** Settings to use when moving or refiling messages
**** Dynamic Folders

Here we supply a function that analyzes the message context to determine
the proper folders for the following actions:

| =mu4e-sent-folder=   | where sent messages are stored    |
| =mu4e-drafts-folder= | where drafts are stored           |
| =mu4e-trash-folder=  | where trashed messages are stored |

#+BEGIN_SRC emacs-lisp
    ;; NOTE: in all that follow, msg will be nil if you are composing a message

  (setq mu4e-drafts-folder
       (lambda (msg)
         (cond
          ((eq msg nil) "/drafts")
          ((string-match "/Gmail" (mu4e-message-field msg :maildir))
           "/Gmail/[Gmail].Drafts")
          ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
           "/Zimbra/Drafts")
          (t "/drafts"))))


  (setq mu4e-sent-folder
       (lambda (msg)
         (cond
          ((eq msg nil) "/sent")
          ((string-match "/Gmail" (mu4e-message-field msg :maildir))
           "/Gmail/[Gmail].Sent Mail")
          ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
           "/Zimbra/Sent")
          (t "/sent"))))


  (setq mu4e-trash-folder
       (lambda (msg)
         (cond
          ((eq msg nil) "/trash")
          ((string-match "/Gmail" (mu4e-message-field msg :maildir))
           "/Gmail/[Gmail].Trash")
          ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
           "/Zimbra/Trash")
          (t "/trash"))))


#+END_SRC
**** Deleting

Here we have to do one of the following when deleting a message:

- If it is in an account that is managed via Gmail, we just remove the
  "\textbackslash{}Inbox" tag and add the "\textbackslash{}Trash" tag.
- If it is in the Zimbra account, we must move it to the Trash folder.

#+BEGIN_SRC emacs-lisp
  (defun got/mu4e-delete-message (msg)
   (when msg
     (cond
      ((string-match "/Gmail" (mu4e-message-field msg :maildir))
       (mu4e-action-retag-message msg "-\\Inbox +\\Trash"))
      ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
       (let ((mu4e-refile-folder "/Zimbra/Trash"))
         (mu4e-view-mark-for-refile)))
      (t nil))))

  (when (boundp 'mu4e-view-actions)
    (add-to-list 'mu4e-view-actions
                 '("delete-message" . got/mu4e-delete-message) t)
    (add-to-list 'mu4e-headers-actions
                 '("delete-message" . got/mu4e-delete-message) t))

#+END_SRC

**** Archiving

Here we have to do one of the following when archiving a message:

- If it is in an account that is managed via Gmail, we just remove the
  "\textbackslash{}Inbox" tag.
- If it is in the Zimbra account, we must move it to the Archive folder.

#+BEGIN_SRC emacs-lisp
  (defun got/mu4e-archive-message (msg)
   (when msg
     (cond
      ((string-match "/Gmail" (mu4e-message-field msg :maildir))
       (mu4e-action-retag-message msg "-\\Inbox"))
      ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
       (let ((mu4e-refile-folder "/Zimbra/Archive"))
         (mu4e-view-mark-for-refile)))
      (t nil))))

  (when (boundp 'mu4e-view-actions)
    (add-to-list 'mu4e-view-actions
                 '("archive-message" . got/mu4e-archive-message) t)
    (add-to-list 'mu4e-headers-actions
                 '("archive-message" . got/mu4e-archive-message) t))

#+END_SRC

**** Spam Handling

This is to do the proper spam handling based on the account the
message came from.

- If it is in an account that is managed via Gmail, we just remove the
  "\textbackslash{}Inbox" tag and add a "\textbackslash{}Spam" tag
- If it is in the Zimbra account, we must move it to the Junk folder.


#+BEGIN_SRC emacs-lisp
  (defun got/mu4e-spam-message (msg)
   (when msg
     (cond
      ((string-match "/Gmail" (mu4e-message-field msg :maildir))
       (mu4e-action-retag-message msg "-\\Inbox +\\Spam"))
      ((string-match "/Zimbra" (mu4e-message-field msg :maildir))
       (let ((mu4e-refile-folder "/Zimbra/Junk"))
         (mu4e-view-mark-for-refile)))
      (t nil))))

  (when (boundp 'mu4e-view-actions)
    (add-to-list 'mu4e-view-actions
                 '("spam-message" . got/mu4e-spam-message) t)
    (add-to-list 'mu4e-headers-actions
                 '("spam-message" . got/mu4e-spam-message) t))

#+END_SRC

*** Settings to use when composing mail

I define the variable =got/mu4e-account-alist= in my ~.private.el~ file.

**** Define function to select an account

#+BEGIN_SRC emacs-lisp
  (defun got/mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var)) got/mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) got/mu4e-account-alist)
                               nil t nil nil (caar got/mu4e-account-alist))))
           (account-vars (cdr (assoc account got/mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))
  (when (boundp 'mu4e-compose-pre-hook)
    (add-hook 'mu4e-compose-pre-hook 'got/mu4e-set-account))
#+END_SRC

**** Enable Org Mode Message Composition

This lets you enter the body of the message using org-mode syntax.
/Remember/, when in this mode be sure and type ~M-m~ before typing
~C-c C-c~ to send your message!

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (org-mu4e-compose-org-mode)))
#+END_SRC

*** Window Handling

Got this from John. Have this disabled for now.

#+BEGIN_EXAMPLE
;; Window handling (https://github.com/magnars/.emacs.d/blob/master/setup-mu4e.el)
;; Start mu4e in fullscreen, immediately ping for new mail
(defun mu4e-up-to-date-status ()
  (interactive)
  (window-configuration-to-register :mu4e-fullscreen)
  (mu4e)
  (mu4e-update-mail-and-index t)
  (delete-other-windows))

;; Restore previous window configuration
(defun mu4e-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :mu4e-fullscreen))

(define-key mu4e-main-mode-map (kbd "q") 'mu4e-quit-session)
(define-key mu4e-headers-mode-map (kbd "M-u") 'mu4e-update-mail-show-window)
(bind-key "C-c m" 'mu4e-up-to-date-status)

#+END_EXAMPLE

*** Actions

#+BEGIN_SRC emacs-lisp
  ;; Support for labels
  (setq mu4e-action-tags-header "X-Keywords")
  (when (boundp 'mu4e-view-actions)
    (add-to-list 'mu4e-view-actions
                 '("retag-message" . mu4e-action-retag-message) t))
  (when (boundp 'mu4e-headers-actions)
    (add-to-list 'mu4e-headers-actions
                 '("retag-message" . mu4e-action-retag-message) t))
#+END_SRC
*** Autoupdate Index

Auto-update the Zapien index every 2 minutes.

#+BEGIN_SRC emacs-lisp
  ;; Disable this for now while testing an alternate method
  ;; (setq
  ;;  ;; Choices here are to set this to "offlineimap" or "true"
  ;;  ;; If you are using launchd to run offlinemap, set to "true"
  ;;  ;; If you want mu4e to run offlineimap, set to "offlineimap"
  ;;  mu4e-get-mail-command "true"
  ;;  mu4e-update-interval 120)
#+END_SRC

*** Compose Email with Org-Mode

#+BEGIN_SRC emacs-lisp
  (when (and (require 'mu4e nil :noerror)
               (require 'org-mu4e nil :noerror))

    (defun got/org~mu4e-mime-replace-images (str current-file)
        "Replace images in html files with cid links.  STR is the buffer
  to parse.  CURRENT-FILE is the temporary file name.  We just use it
  to help resolve relative paths.
  "
  (let (html-images)
    (cons
     (replace-regexp-in-string
      "src=\"\\(/[^\"]+\\)\"\\|src=\"\\(file:\\/\\/[^\"]+\\)\"\\|src=\"\\([^:]+$\\)"
      (lambda (text)
        (let* ((url (and (string-match "src=\"\\([^\"]+\\)\"" text)
                         (match-string 1 text)))
               (mime-type (concat "image/" (file-name-extension url)))
               (cur-dir (file-name-directory current-file))
               (path (cond
                      ;; /a/b/c.jpg
                      ((string-match "^/\\(.+\\)$" url)
                       (match-string 1 url))
                      ;; file:///a/b/c.jpg
                      ((string-match "^file:\\/\\/\\(.+\\)$" url)
                       (match-string 1 url))
                      ;; ../a/b/c.jpg or a/b/c.jpg or whatever
                      (t
                       (expand-file-name url cur-dir))))
               (id (replace-regexp-in-string "[\/\\\\]" "_" path)))
          (add-to-list 'html-images (org~mu4e-mime-file
                                     mime-type path id))
          (format "src=\"cid:%s\"" id)))
      str)
     html-images)))


  (defun jme/mu4e-mime-convert-to-html ()
    "Another rewrite of mu4e function to convert the current body to html.
     This one handles attachments."
    (unless (executable-find "dvipng")
      (mu4e-error "Required program dvipng not found"))
    (let* ((begin
            (save-excursion
              (goto-char (point-min))
              (search-forward mail-header-separator)))
           (mail-buffer (current-buffer))
           (end (point-max))
           (raw-body (buffer-substring begin end))
           (raw-body-for-html (with-temp-buffer
                                (insert-buffer-substring mail-buffer begin end)
                                (while (re-search-forward
                                        "<#/?\\(part\\|multipart\\|external\\|mml\\|secure\\)[^>]*>"
                                        nil t)
                                  (delete-region (match-beginning 0)(match-end 0)))
                                (buffer-substring (point-min) (point-max))))

           (tmp-file (make-temp-name (expand-file-name "mail"
                                                       temporary-file-directory)))
           (body (org-export-string-as (concat
                                        "#+TITLE:\n"
                                        "#+OPTIONS: num:nil toc:nil author:nil H:0\n"
                                        raw-body) 'ascii)) ;;(org-export-string-as raw-body 'org))
           ;; because we probably don't want to skip part of our mail
           (org-export-skip-text-before-1st-heading nil)
           ;; because we probably don't want to export a huge style file
           (org-export-htmlize-output-type 'inline-css)
           ;; makes the replies with ">"s look nicer
           (org-export-preserve-breaks t)
           ;; dvipng for inline latex because MathJax doesn't work in mail
           (org-export-with-LaTeX-fragments 'dvipng)
           ;; to hold attachments for inline html images
           (html-and-images
            (got/org~mu4e-mime-replace-images
             (org-export-string-as (concat
                                    "#+TITLE:\n"
                                    "#+OPTIONS: num:nil toc:nil author:nil html-postamble:nil html-scripts:nil\n"
                                    raw-body-for-html) 'html)
             tmp-file))
           (html-images (cdr html-and-images))
           (html (car html-and-images)))
      (delete-region begin end)
      (save-excursion
        (goto-char begin)
        (newline)
        (insert (org~mu4e-mime-multipart
                 body html (mapconcat 'identity html-images "\n"))))))


  (add-hook 'message-send-hook 'jme/mu4e-mime-convert-to-html))

#+END_SRC
** Octopress Setup (gordy.github.io)

Basic directory configation.  See [[http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/][this post]] for detailed notes.  Also
see the [[http://octopress.org][main octopress website]] and the [[https://github.com/yoshinari-nomura/org-octopress][org-octopress]] site.

Basic usage:

- ~M-x org-octopress~
- Type ~w~ to create a new post
- In the new org-mode buffer that was created be sure and add your
  /#+JEKYLL_CATEGORIES/ (tags).  If there are more than one, separate
  them with a space.  Example:
  #+BEGIN_EXAMPLE
  #+JEKYLL_CATEGORIES: ubuntu emacs
  #+END_EXAMPLE
- When you are through, need to export the Org mode file to HTML as
  follows: ~C-c C-e (org-export-dispatch) and type “P” “x” “octopress”~
- Everything else that follows is done from a terminal or eshell from
  the top-level of the blog:
  - ~rake preview~ - lets you open a browser to ~localhost:4000~ to
    see the new post.
  - ~rake deploy~ - to deploy the updates to github.
- Be sure and commit your changes in your local git repo (in the
  /source/ branch).
- Branches
  - /source/ - this is where you compose everything and this is what
    the main repo directory stays in.
  - /master/ - this is what is served to the public from GitHub
    pages.  The ~_deploy~ directory is its own repo and is always on
    master.


#+BEGIN_SRC emacs-lisp
  ;; (when (require 'org-octopress nil :noerror)
  ;;   (setq org-octopress-directory-top "~/Documents/Personal/gordyt.github.io/source"
  ;;         org-octopress-directory-posts (concat org-octopress-directory-top "/_posts")
  ;;         org-octopress-directory-org-top org-octopress-directory-top
  ;;         org-octopress-directory-org-posts (concat org-octopress-directory-org-top "/blog")
  ;;         org-octopress-setup-file "~/.emacs.d/octopress-setupfile.txt"
  ;;         ))
#+END_SRC
** Frame size customization

Set up initial frame size and position to occupy the full height of
the monitor that is available, half the width, and positioned on the
far right side.  This function should be called /after/ setting the
theme.


#+BEGIN_SRC emacs-lisp
  (defun got/resize-frame ()
    "Resize the current Frame to take up 1/2 of the vertical space,
     positioned on the right side."
    (let* ((workarea (cdr (assoc 'workarea (car (display-monitor-attributes-list)))))
           (x (first workarea))
           (y (second workarea))
           (w (third workarea))
           (h (fourth workarea))
           (fw (/ w 2))
           (fh h)
           (fx fw)
           (fy y)
           (frm (car (frame-list))))
      (set-frame-size frm fw fh t)
      (set-frame-position frm fx fy)))
#+END_SRC

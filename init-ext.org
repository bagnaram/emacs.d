* File Header
#+BEGIN_SRC emacs-lisp :padline no
  ;;; init-ext.el -- Automatically generated initialization file
  ;;;
  ;;; This file is generated from the init-ext.org file, so no edits
  ;;; should be made to this file directly.
  ;;;
  ;;; Commentary:
  ;;;
  ;;; See init-ext.org for complete documentation.
  ;;;
  ;;; Code:
  ;;;

#+END_SRC

* Packages List

The table that follows this code block documents all of the packages
that I am currently using.  To update the list, just move the point
to anywhere inside the code block and type ~C-c C-c~ and answer "yes"
to the prompt.


#+BEGIN_SRC emacs-lisp :tangle no
  (defun got/gen-package-table ()
    "Generate a table of all installed packages, along with their descriptions"
    (cons '("_Package Name_" "_Package Description_")
    (sort
     (mapcar
      (lambda (pkg-desc)
        (list (car pkg-desc) (package-desc-doc (cdr pkg-desc))))
      package-alist)
     `(lambda (a b) (string-lessp (car a) (car b))))))

  (got/gen-package-table)
#+END_SRC

#+RESULTS:
| _Package Name_                  | _Package Description_                                                              |
| ac-slime                        | An auto-complete source using slime completions                                    |
| async                           | Asynchronous processing in Emacs                                                   |
| auto-complete                   | Auto Completion for GNU Emacs                                                      |
| bind-key                        | A simple way to manage personal keybindings                                        |
| cask                            | Cask: Project management for Emacs package development                             |
| cider                           | Clojure Integrated Development Environment and REPL                                |
| clojure-mode                    | Major mode for Clojure code                                                        |
| clojure-mode-extra-font-locking | Extra font-locking for Clojure mode                                                |
| color-theme-sanityinc-tomorrow  | A version of Chris Kempson's various Tomorrow themes                               |
| concurrent                      | Concurrent utility functions for emacs lisp                                        |
| ctable                          | Table component for Emacs Lisp                                                     |
| dash                            | A modern list library for Emacs                                                    |
| deferred                        | Simple asynchronous functions for emacs lisp                                       |
| diminish                        | Diminished modes are minor modes with no modeline display                          |
| drag-stuff                      | Drag stuff (lines, words, region, etc...) around                                   |
| edit-server                     | server that responds to edit requests from Chrome                                  |
| epc                             | A RPC stack for the Emacs Lisp                                                     |
| epl                             | Emacs Package Library                                                              |
| erlang                          | Erlang major mode                                                                  |
| exec-path-from-shell            | Get environment variables such as $PATH from the shell                             |
| expand-region                   | Increase selected region by semantic units.                                        |
| f                               | Modern API for working with files and directories                                  |
| flx                             | fuzzy matching with good sorting                                                   |
| flx-ido                         | flx integration for ido                                                            |
| flycheck                        | Modern on-the-fly syntax checking for GNU Emacs                                    |
| flycheck-cask                   | Cask support in Flycheck                                                           |
| git-commit-mode                 | Major mode for editing git commit messages                                         |
| git-rebase-mode                 | Major mode for editing git rebase files                                            |
| gmail-message-mode              | A major-mode for editing gmail messages using markdown syntax.                     |
| ham-mode                        | Html As Markdown. Transparently edit an html file using markdown.                  |
| handlebars-mode                 | A major mode for editing Handlebars files.                                         |
| haskell-mode                    | A Haskell editing mode                                                             |
| helm                            | Helm is an Emacs incremental and narrowing framework                               |
| html-to-markdown                | HTML to Markdown converter written in Emacs-lisp.                                  |
| htmlize                         | Convert buffer text and decorations to HTML.                                       |
| idle-highlight-mode             | highlight the word the point is on                                                 |
| ido-ubiquitous                  | Use ido (nearly) everywhere.                                                       |
| ido-vertical-mode               | Makes ido-mode display vertically.                                                 |
| jabber                          | A Jabber client for Emacs.                                                         |
| jedi                            | Python auto-completion for Emacs                                                   |
| magit                           | control Git from Emacs                                                             |
| markdown-mode                   | Emacs Major mode for Markdown-formatted text files                                 |
| markdown-mode+                  | extra functions for markdown-mode                                                  |
| multiple-cursors                | Multiple cursors for Emacs.                                                        |
| nyan-mode                       | Nyan Cat shows position in current buffer in mode-line.                            |
| org                             | Outline-based notes management and organizer                                       |
| package-build                   | Tools for assembling a package archive                                             |
| pallet                          | A package management tool for Emacs, using Cask.                                   |
| pkg-info                        | Information about packages                                                         |
| popup                           | Visual Popup User Interface                                                        |
| popwin                          | Popup Window Manager.                                                              |
| powerline                       | Rewrite of Powerline                                                               |
| prodigy                         | Manage external services from within Emacs                                         |
| projectile                      | Manage and navigate projects in Emacs easily                                       |
| python-environment              | virtualenv API for Emacs Lisp                                                      |
| queue                           | Queue data structure                                                               |
| s                               | The long lost Emacs string manipulation library.                                   |
| shut-up                         | Shut up would you!                                                                 |
| smartparens                     | Automatic insertion, wrapping and paredit-like navigation with user defined pairs. |
| smex                            | M-x interface with Ido-style fuzzy matching.                                       |
| twittering-mode                 | Major mode for Twitter                                                             |
| undo-tree                       | Treat undo history as a tree                                                       |
| use-package                     | A use-package declaration for simplifying your .emacs                              |
| w3m                             | an Emacs interface to w3m                                                          |
| web-mode                        | major mode for editing html templates                                              |
| yasnippet                       | Yet another snippet extension for Emacs.                                           |
* Utility Functions
** got/load-file-base-name

#+BEGIN_SRC emacs-lisp
  (defun got/load-file-base-name (directory base-name)
    "Look for files located in DIRECTORY whose base name is BASE-NAME.

  If BASE-NAME.org exists, load it via org-babel-laod-file
  Else if BASE-NAME.el exists, load it via load"
    (let ((org-file (expand-file-name (concat base-name ".org") directory))
          (lisp-file (expand-file-name  (concat base-name ".el") directory)))
      (cond
       ((file-exists-p org-file) (org-babel-load-file org-file))
       ((file-exists-p lisp-file) (load lisp-file)))))

#+END_SRC

** got/send-region-to-jrnl

Got the idea from [[http://ericjmritz.name/2014/06/30/send-emacs-buffer-to-jrnl/][here]].

#+BEGIN_SRC emacs-lisp
  (defun got/send-region-to-jrnl (start end)
    "Send contents of region delineated by START and END to jrnl."
    (interactive "r")
    (call-process-region start end "jrnl"))
#+END_SRC

** uconv

This is a great formula for working with spreadsheets.

#+BEGIN_SRC emacs-lisp
  (defmath uconv (expression new-units)
    "Perform unit conversion on a calc expression.

Example (calling from elisp - note having to prepend  'calcFunc-'
to the function name):

    (calcFunc-uconv (calc-eval \"5.38 mi + 2500 m\" 'raw) \"mi\")

    or

    (calcFunc-uconv (calc-eval \"44 degF\" 'raw) \"degC\")


Here is a more complicated example that sums a column of distances and converts
the result to use miles (formatted to 2 decimal places):

    '(calcFunc-uconv (calc-eval (mapconcat 'identity (list @III..@IIII) \" + \") 'raw) \"mi\");%.2f mi

"
    (calc-eval
     (math-convert-units
      (calc-eval expression 'raw)
      (calc-eval new-units 'raw))))
#+END_SRC

* Custom Settings File

Here I am specifying an alternate location for any custom settings.  This
helps keep my ~init.el~ file cleaner.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" got/dotfiles-dir))
#+END_SRC
* Load Private settings

These are things like email settings, etc.  I keep them in a file in my
~emacs.d~ directory called ~.private.el~ and I do /not/ save this file in git.

#+BEGIN_SRC emacs-lisp
(setq got/private-settings
      (expand-file-name ".private.el" got/dotfiles-dir))
(when (file-exists-p got/private-settings)
  (load-file got/private-settings))
#+END_SRC

* Load OS-specific Settings File

Path names, etc., will tend to vary from one operating system to
another.  Here we use the =system-type= variable to look for
initialization files named /<system-type>.org/ or /<system-type.el>/
and load them.

Note that on some systems there may be a ~/~ character in the value of
=system-type=; e.g., on Ubuntu the value is ~gnu/linux~, so we convert ~/~ to ~-~
and the file that we look for would be ~gnu-linux.org~ or ~gnu-linux.el~.

#+BEGIN_SRC emacs-lisp
  (let* ((system-name (symbol-name system-type))
         (base-name (replace-regexp-in-string "/" "-" system-name)))
    (got/load-file-base-name got/dotfiles-dir base-name))

#+END_SRC

* Load Hostname-specific Settings File

This is yet another more specify place where settings can
go. Here we look for files named <hostname>.org, or <hostname>.el
and load them.

#+BEGIN_SRC emacs-lisp
  (let ((host-name-base (car (split-string (system-name) "\\."))))
    (got/load-file-base-name got/dotfiles-dir host-name-base))
#+END_SRC

* Library Paths

All configuration is stored under =got/dotfiles-dir= (=~/.emacs.d=).
Meta-information files (backups, etc.) are stored in =got/metafiles-dir=.

#+BEGIN_SRC emacs-lisp
(setq got/metafiles-dir "~/.emacs-meta")
(unless (file-exists-p got/metafiles-dir)
       (make-directory got/metafiles-dir))
#+END_SRC

* Additional Paths

Add all top-level directories in =got/dotfiles-dir= to the load path.

#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* Meta-Information

These variables are used to configure where other services store various files that
they create.

| Variable Name             | Description                                      |
|---------------------------+--------------------------------------------------|
| got/meta-backup           | Location for backup files                        |
| got/auto-save-prefix      | Location for autosave files                      |
| got/themes-dir            | Location for my custom themes                    |
| got/meta-ido              | file where id state is saved between invocations |
| got/ac-comphist-file      | path to the auto complete history file           |
| got/meta-recent           | where to store list of recently visited files    |
| got/jabber-history        | Where jabber stores its message history          |
| got/jabber-avatar-cache   | where jabber caches its avatar images            |
| got/mc-list-file          | where multiple-cursors tracks preferences        |
| got/bookmark-default-file | where Emacs Booksmarks are stored                |


#+BEGIN_SRC emacs-lisp
  (defvar got/meta-backup
    (expand-file-name "backups" got/metafiles-dir)
    "Location of backup files")
  (defvar got/auto-save-prefix
    (expand-file-name "autosaves/saves-" got/metafiles-dir)
    "Locations of autosave files")
  (defvar got/themes-dir
    (expand-file-name "themes" got/dotfiles-dir)
    "Location for my custom themes")
  (defvar got/meta-ido
    (expand-file-name "ido.last" got/metafiles-dir)
    "file where id state is saved between invocations")
  (defvar got/meta-recent
    (expand-file-name "recent" got/metafiles-dir)
    "where to store list of recently visited files")
  (defvar got/jabber-history
    (expand-file-name "jabber-history" got/metafiles-dir)
    "where jabber should store its history files")
  (defvar got/jabber-avatar-cache
    (expand-file-name "jabber-avatar-cache" got/metafiles-dir)
    "where jabber should store its avatar cache files")
  (defvar got/mc-list-file
    (expand-file-name "mc-lists.el" got/metafiles-dir)
    "where multiple-cursors tracks preferences")
  (defvar got/bookmark-default-file
    (expand-file-name "bookmarks" got/metafiles-dir)
    "where Emacs stores its bookmarks file")

#+END_SRC

* General Emacs Configuration
** Bind-Key
Require ~bind-key~ early so we can use it when configuring
other packages.

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
#+END_SRC
** Alarm Bell

The bell rings whenever (ding) is called.  Here we make if flash the frame
rather than make a sound (which I find annoying).

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Autocomplete

#+BEGIN_SRC emacs-lisp
  (when (require 'auto-complete-config nil 'noerror)
    (ac-config-default)
      (setq ac-comphist-file
        (expand-file-name "ac-comphist.dat" got/metafiles-dir))
      (setq ac-auto-start nil)
      (ac-set-trigger-key "<backtab>"))

#+END_SRC

** Automatic indentation

Using ~C-j~ instead of ~RET~ normally runs the =newline-and-indent=
function.  Since this is so handy I remap ~RET~ to do this.

#+BEGIN_SRC emacs-lisp
(bind-key "RET" 'newline-and-indent)
#+END_SRC

** Autorevert mode

Automatically revert buffers when they change on disk.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode)
#+END_SRC

** Autosave Files

Configure the behaviour of Emacs auto-save.  Here we tell Emacs
where to put the autosave files.

#+BEGIN_SRC emacs-lisp
 (setq auto-save-list-file-prefix got/auto-save-prefix)
#+END_SRC

** Backup Files

Configure the behaviour of Emacs file backups.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p got/meta-backup)
    (make-directory got/meta-backup t))
  (setq backup-directory-alist `(("." . ,got/meta-backup)))
  (setq make-backup-files t           ; make backup of a file the first time it is saved
        backup-by-copying t           ; always use copying to create backup files
        version-control t             ; make numeric backups unconditionally
        delete-old-versions t         ; delete excess backup versions silently
        delete-by-moving-to-trash nil ; delete excess backup versions directly
        kept-old-versions 2           ; number of oldest versions to keep when new numbered backup made
        kept-new-versions 4           ; number of newest verions to keep when new numbered backup made
        auto-save-default t           ; do auto-saving of every file-visiting buffer
        auto-save-timeout 30          ; number of seconds idle time before auto-save
        auto-save-interval 300        ; number of input events between auto-saves
  )
#+END_SRC

** Bookmarks

Customize where Emacs stores its bookmarks file

#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file got/bookmark-default-file)
#+END_SRC

** Ediff

You can invoke /ediff/ from within /magit/ by typing ~e~ with the
point on any file in the list of changes.  By default it positions the
two ediff windows on top of each other.  I prefer them to be
side-by-side.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

** expand-regiocn

Create ~C-=~ keybinding to invoce the =er/expand-region=
function. This increases selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'expand-region)
      (bind-key "C-=" 'er/expand-region))
#+END_SRC

** Helm
This is a handy key-binding to use when you are in some detail help from a
helm session.  This will bring you back into the helm session.

#+BEGIN_SRC emacs-lisp
    (when (package-installed-p 'helm)
      (bind-key "C-c h" 'helm-resume)
      (require 'helm-misc)
      (bind-key "C-c M-x" 'helm-M-x)
      (bind-key "C-h a" 'helm-apropos)
      (bind-key "M-s a" 'helm-do-grep)
      (bind-key "M-s b" 'helm-occur)
      (bind-key "M-s F" 'helm-for-files
  ))
#+END_SRC

** Ido

Enable ~ido-ubiquitous-mode~ if that package is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-ubiquitous)
    (ido-ubiquitous-mode 1))
#+END_SRC

Require ~flx-ido~ if it is available.

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flx-ido)
  (require 'flx-ido)
  (setq flx-ido-mode 1))
#+END_SRC

Enable ~ido-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
    (when (package-installed-p 'ido)
      (ido-mode t)
      (setq
       ido-save-directory-list-file got/meta-ido    ; file where id state is saved between invocations
       confirm-nonexistent-file-or-buffer nil       ; Turn off annoying confirmation
       ido-case-fold t                              ; be case-insensitive
       ido-enable-last-directory-history t          ; remember latest selected directory name
       ido-max-work-directory-list 50               ; maximum number of working directories to record
       ido-max-work-file-list 50                    ; maximum number of names of recently opened files to record
       ido-use-filename-at-point nil                ; do not look for filename at point
       ido-use-url-at-point nil                     ; do not look for URL at point
       ido-enable-flex-matching nil                 ; do not try too hard to find matches
       ido-max-prospects 12                         ; max number of items in prospect list
       ido-create-new-buffer 'always                ; ido creates new buffer unconditionally
       ido-confirm-unique-completion t              ; even a unique confirmation must be confirmed
       )

    ;; enable ido for all buffer/file reading
    (ido-everywhere))

#+END_SRC

Enable ~ido-vertical-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-vertical-mode)
    (ido-vertical-mode 1))
#+END_SRC

** Jabber

*** fsm-debug

Jabber enables =fsm-debug= by default.  This should be disabled.

#+BEGIN_SRC emacs-lisp
(setq fsm-debug nil)
#+END_SRC

*** OS-Specific Configuration Notes

I store my jabber configuration in my ~.private.el~ file.  Here is a
sample bit of config.  Notice the =--no-ca-verification= argument.
I am including it just as a way to demonstrate how to handle
configuration for a jabber server that may be using a self-signed
certificate, or a signed certificate that ~gnutls-cli~ doesn't know
about.


#+BEGIN_SRC emacs-lisp :tangle no
(when (package-installed-p 'jabber)
  (setq starttls-use-gnutls t
		starttls-gnutls-program "gnutls-cli"
		starttls-extra-arguments '("--starttls" "--insecure" "--no-ca-verification"))

  (setq jabber-account-list
		'(("<my-account-name>@<jabber-server-address>"
		   (:network-server . "<jabber-server-address>")
		   (:password . "<my-account-password>")
		   (:connection-type . ssl)))))
#+END_SRC

*** Miscellaneous Commands

A couple of useful jabber commands:

- =M-x jabber-connect-all= will connect you to all jabber accounts in
  your =jabber-account-list=.
- =M-x jabber-vcard-edit= will pull down your vcard entry from the
  jabber server and let you edit your information.  From here you can
  also attach a photo of yourself.  There is an 8K file size limit if
  you use this interface.  You /can/ get around this rather easily.
  Before executing the =jabber-vcard-edit= command, just open the file
  ~jabber-vcard.el~, goto the function =jabber-vcard-reassemble=, bump
  up the value used for size comparison (8192) to something bigger,
  and evaluate the function.  After uploading your vcard changes you
  can return the value back to 8192.
- =M-x jabber-groupchat-join= is used to join in with a particular
  discussion group.  If you want to have that happen automatically
  when you connect to a particular jabber server, take a look at the
  next command.
- =M-x jabber-edit-bookmarks= will pull down your current bookmarks on
  a given jabber server.  You can add a bookmark for a particular
  groupchat and check the box to automatically connect to it when
  log-in to that jabber server.

*** Jabber Avatar Cache Settings

Jabber will cache avatar image files.  This controls where those are
stored.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (setq jabber-avatar-cache-directory got/jabber-avatar-cache))
#+END_SRC

*** Jabber History

The following configures Jabber message history.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (unless (file-exists-p got/jabber-history)
      (make-directory got/jabber-history))
    (setq jabber-history-enable t                  ; enable history
          jabber-history-dir got/jabber-history    ; located here
          jabber-history-size-limit 1024           ; when files get this big
          jabber-history-enable-rotation t         ; then rotate them
          jabber-use-global-history nil))          ; disable global history file
          
#+END_SRC

*** Jabber Notifications

See the file ~darwin.org~ for some notifications customization.

*** Jabber Reconnecting

The following instructs jabber to reconnect automatically when you
network configuration changes.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jabber)
    (setq jabber-auto-reconnect t))

#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

To get out of multiple-cursors-mode, press ~RET~ or ~C-g~. The latter
will first disable multiple regions before disabling multiple
cursors. If you want to insert a newline in multiple-cursors-mode, use
~C-j~.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'multiple-cursors)
    ;; with active region spanning multiple lines, the following will add a cursor to each line
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    ;; add multiple cursors based on keywords in the buffer, first mark the word then
    ;; add more cursors
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

The following controls where ~multiple-cursors~ stores preferences
that the user has set for running commands with multiple cursors.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'multiple-cursors)
    (setq mc/list-file got/mc-list-file))
#+END_SRC

** newlines

Add a newline to the end of a file on save.

#+BEGIN_SRC
(setq require-final-newline t)
#+END_SRC

** powerline

Powerline is a library for customizing the mode-line that is based on
the Vim Powerline. A collection of predefined themes comes with the
package.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'powerline)
    (powerline-default-theme)
    (which-function-mode 0))
#+END_SRC

** show-paren-mode

Enable matching of parenthesis globally.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Smex

[[http://www.emacswiki.org/emacs/Smex][Smex]] is a M-x enhancement for Emacs. Built on top of IDO, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'smex)
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    )
#+END_SRC

** tab width

Set the default tab with to 4 spaces.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** tangle buffer

Quick way to tell org to tangle the current buffer.

#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-g t"
		  '(lambda ()
			 "Tangle the current buffer"
			 (interactive)
			 (org-babel-tangle-file buffer-file-name)))
#+END_SRC

** Toolbar

Hide the toolbar when running in a window-system on a mac.  Otherwise enable it.

#+BEGIN_SRC emacs-lisp
  (if (equal window-system 'mac)
    (tool-bar-mode -1)
    (tool-bar-mode 1))
#+END_SRC

** truncate lines

Respect the value of =truncate-lines= with respect to line truncation.

#+BEGIN_SRC emacs-lisp
(setq truncate-partial-width-windows nil)
#+END_SRC

** Uniquify

The library [[http://www.emacswiki.org/emacs/uniquify][uniquify]] overrides Emacs’ default mechanism for making
buffer names unique (using suffixes like <2>, <3> etc.) with a more
sensible behaviour which use parts of the file names to make the
buffer names distinguishable.


#+BEGIN_SRC emacs-lisp
(when (require 'uniquify nil 'noerror)
  (setq uniquify-buffer-name-style 'forward))
#+END_SRC

** UTF-8 Settings

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8) ; set terminal output to utf-8
(set-keyboard-coding-system 'utf-8) ; set terminal input to utf-8
(prefer-coding-system 'utf-8)       ; set preferred coding to utf-8
#+END_SRC

** w3m

The ~w3m~ package is an Emacs inteface to the ~w3m~ program.  We
enable our configuration based on two things:

1. Presence of the ~w3m~ command, and
2. Presence of the ~w3m~ emacs package

#+BEGIN_SRC emacs-lisp
  (if (and
       (= 0 (shell-command "which w3m"))
       (package-installed-p 'w3m))
      (setq w3m-use-cookies t)
    (warn "w3m not available"))
#+END_SRC

** wrap-region

This is a small function that implements a small bit of functionality
that I didn't get from the fantastic /smartparens/ package.  Basically
you mark any region and invoke this function.  It will prompt you to
enter a bit of text and hit RET.  The text you enter will be inserted
around the region.  I have this function bound to =C-c C-g w=.

#+BEGIN_SRC emacs-lisp
(defun got/wrap-region (start end  text)
  "Wrap the region delineated by START and END with TEXT"
  (interactive "r\nstext: ")
  (save-excursion
	(goto-char end)
	(insert text)
	(goto-char start)
	(insert text)))
	

(bind-key "C-c C-g w" 'got/wrap-region)
#+END_SRC

* Theme Configuration

Make my custom themes directory available to Emacs.  

- Do ~M-x customize-themes~ to see a list of all your available themes.
- Do ~M-x load-theme~ to load a new theme.

#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory got/themes-dir)
;; EXAMPLE: Loading a new theme
;; specifying the t option to load-theme prevents being asked about
;; loading an unsafe theme.
;; (load-theme 'gordy t)
#+END_SRC

Now let's load a new theme I found.

#+BEGIN_SRC emacs-lisp
  (load-theme 'sanityinc-tomorrow-bright t)
#+END_SRC

* Mode-Specific Hooks, Notes, and Configuration
** cider-mode

Really just a few notes here.  If you want to use /cider/ to connect
to a running ~lein repl~ session, you must make sure to update the
~project.clj~ file and add the following:

#+BEGIN_EXAMPLE
:plugins [[cider/cider-nrepl "0.7.0-SNAPSHOT"]]
#+END_EXAMPLE

If you do not you will get the following error:

#+BEGIN_EXAMPLE
Error: (error "Can't find nREPL middleware providing op \"stacktrace\".
Please, install cider-nrepl 0.7.0-snapshot and restart CIDER")
#+END_EXAMPLE

If this does happen, you will want to kill the ~lein repl~ session.
This will allow Emacs to start accepting input again.

If you want to make this available anytime you run ~lein repl~,
whether or not you are in a project, just do the following instead:

- Create a file called ~profiles.clj~ in ~$HOME/.lein~
- Add this line:
  #+BEGIN_EXAMPLE
  {:user {:plugins [[cider/cider-nrepl "0.7.0-SNAPSHOT"]]}}  
  #+END_EXAMPLE

** gmail-message-mode

I learned about this mode [[http://endlessparentheses.com/write-gmail-in-emacs-the-easy-way-gmail-message-mode.html?source%3Drss][here.]]  It allows you to compose
browser-based input that accepts HTML using markdown.  Some set-up
notes:

- In Chrome, install the [[http://www.emacswiki.org/emacs/Edit_with_Emacs][Edit with Emacs]] browser extension
- You should also have the [[http://daringfireball.net/projects/markdown/][markdown]] or [[http://johnmacfarlane.net/pandoc/][pandoc]] package installed.  I
  installed markdown via Homebrew.

The following snippet starts the ~edit-server~ so that the browser can
communicate with Emacs.  /Note:/ use ~C-x #~ to complete editing and
send the results back to the browser.

#+BEGIN_SRC emacs-lisp
(when (require 'edit-server nil :noerror)
  (edit-server-start))
#+END_SRC

** Javascript mode
** flycheck-mode

Enable =flycheck-mode= when opening a Javascript buffer, if flycheck
is available.

/Note:/ For this to work, you should install [[http://www.jshint.com/][jshint]] as follows:

#+BEGIN_SRC sh
npm install -g jshint
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'flycheck)
    (if (= (length (shell-command-to-string "which jshint")) 0)
        (warn "flycheck-mode not enabled for Javascript.  Please install jshint")    
      (add-hook 'js-mode-hook 'flycheck-mode)))
#+END_SRC

** lisp-mode

Slime configuration for editing Lisp code.  Tell /slime/ what Lisp to
run.  In this case we are configuring it to use [[http://sbcl.org/][Steel Bank Common Lisp]].

#+BEGIN_SRC emacs-lisp
  (let* ((slime-software (expand-file-name "quicklisp/dists/quicklisp/software" (getenv "HOME")))
         (slime-pkg (car(reverse (directory-files slime-software t "slime-[0-9]")))))
    (when slime-pkg
      (progn
        (add-to-list 'load-path slime-pkg)
        (require 'slime-autoloads)
        (setq inferior-lisp-program "sbcl")
        (slime-setup '(slime-fancy slime-asdf)))))

  (when (package-installed-p 'ac-slime)
    (add-hook 'slime-mode-hook 'set-up-slime-ac)
    (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    (eval-after-load "auto-complete"
      '(add-to-list 'ac-modes 'slime-repl-mode)))
#+END_SRC

*** Common Lisp Hyperspec

If we have a local cached copy of the [[http://www.lispworks.com/documentation/HyperSpec/Front/][Common Lisp HyperSpec]], we will
look here for documentation.

#+BEGIN_SRC emacs-lisp
  (when (boundp 'got/common-lisp-hyperspec-root)
    (setq common-lisp-hyperspec-root got/common-lisp-hyperspec-root))

#+END_SRC

** org-mode
*** handle x-devonthink-item links

I got this tip from [[https://github.com/jwiegley/dot-emacs/blob/master/lisp/org-devonthink.el][John Wiegley's org-devonthink.el]] file:

#+BEGIN_SRC emacs-lisp
  (org-add-link-type "x-devonthink-item" 'got/org-dtp-open)

  (defun got/org-dtp-open (record-location)
    "Visit the DEVONthink Pro message with the given Message Identifier"
    (shell-command (concat "open x-devonthink-item:" record-location)))
#+END_SRC

*** got/load-link-other-frame

Handy function that will load any kind of hyperlink that org understands
into a brand-new frame.

#+BEGIN_SRC emacs-lisp
(defun got/load-link-other-frame (hyperlink)
  "Load the specified HYPERLINK in frame called hyper-frame.
The function will create it if necessary and will re-use it if it already
exists.

EXAMPLE USAGE:

\(got/load-link-other-frame \"info:eintr#Writing%20Defuns\")"
  (interactive "sHyperlink: ")
  (save-excursion
    (let* ((newframe-name "hyper-frame")
           (newframe (car (filtered-frame-list
                          (lambda (f) (string= newframe-name (frame-parameter f 'name)))))))
      (select-frame
       (if newframe newframe (make-frame (list (cons 'name newframe-name)))))
      (org-open-link-from-string hyperlink))))

#+END_SRC

*** org-mode global key bindings

| function         | description                                                               |
| =org-store-link= | save an /org-link/ to the current location.  Insert later with ~C-c C-l~. |
| =org-capture=    | select capture template and insert in target location                     |
| =org-agenda=     | dispatch agenda command                                                   |
| =org-iswitchb=   | switch between org buffers                                                |

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** org-babel language support.

By default only emacs-lisp is enabled.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (ditaa . t)
     (plantuml . t)
     (clojure . t)
     (calc . t)
     (js . t)
     (lisp . t)
     (dot . t)
     (scheme . t)
     (sh . t)))

#+END_SRC

*** org-bullet (experimental)

This is some experimental code.

Load my /org-bullet/ stuff if it is available.

#+BEGIN_SRC emacs-lisp
  (let* ((org-bullet-code (concat got/dotfiles-dir "org-bullet.org"))
         (org-bullet-exists (file-exists-p org-bullet-code)))
    (and org-bullet-exists (org-babel-load-file org-bullet-code)))
#+END_SRC

*** org-capture

Define basic /org-capture/ templates.  I currently have just one.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "TODO template" entry
           (file+headline org-default-notes-file "Inbox")
           "** TODO %?\n   CONTEXT: %a\n   OPENED: %U"
           )))
#+END_SRC

*** org-src-mode settings

This is a minor mode for language major mode buffers generated by org.
This minor mode is turned on in two situations:

- when editing a source code snippet with "C-c '".
- When formatting a source code snippet for export with htmlize.

#+BEGIN_SRC emacs-lisp
  (setq
   org-src-fontify-natively t      ; fontify code in code blocks
   srv-src-tab-acts-natively t     ; effect of TAB in code block as if issued in language major mode buffer
   )
#+END_SRC

** python-mode
*** flycheck-mode

Enable =flycheck-mode= when opening a Python buffer, if flycheck is available

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flycheck)
(add-hook 'python-mode-hook 'flycheck-mode))
#+END_SRC

*** jedi

[[http://tkf.github.io/emacs-jedi/latest/][jedi]] is a Python auto-completion package for Emacs. It aims at helping
your Python coding in a non-destructive way. It also helps you to find
information about Python objects, such as docstring, function
arguments and code location.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jedi)
    (setq jedi:setup-keys t)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:setup))

#+END_SRC

** shift-select-mode

When non-nil, shifted motion keys activate the mark momentarily.

While the mark is activated in this way, any shift-translated point
motion key extends the region, and if Transient Mark mode was off, it
is temporarily turned on.  Furthermore, the mark will be deactivated
by any subsequent point motion key that was not shift-translated, or
by any action that normally deactivates the mark in Transient Mark mode.

The following setting disables the use of shift+arrows for mark.

#+BEGIN_SRC emacs-lisp
  (setq shift-select-mode nil)
#+END_SRC
** resentf-mode

Enable ~recentf~ mode which will save a list of recent files visited.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'recentf)
    (setq recentf-mode 1
          recentf-save-file got/meta-recent    ; where to store the file
          recentf-max-saved-items 100          ; save 100 most recent files visited
          recentf-max-menu-items 15            ; max 15 items in the menu
          )
    (recentf-mode t))

#+END_SRC

** text-mode

Automatically enable auto fill mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

** twittering-mode

Configuration for [[http://www.emacswiki.org/emacs/TwitteringMode][twittering-mode.]]  Basic usage:

- ~M-x twit~ to run =twittering-mode= and put you in view mode
- move cursor on current timeline
  - ~j~ goto next tweet
  - ~k~ goto previous tweet
  - ~n~ goto next tweet whose author is same as current tweet
  - ~p~ goto previous tweet whose author is same as current tweet
  - ~l~ goto next character
  - ~h~ goto previous character
  - ~0~ goto beginning of line
  - ~^~ goto beginning of text on current line
  - ~$~ goto end of line
  - ~C-i~ goto next username, URI, or timeline symbol
  - ~M-C-i~ goto previous username, URI, or timeline symbol
  - ~<backspace>~ or ~M-v~ scroll down
  - ~<space>~ or ~C-v~ scroll up
  - ~H~ goto beginning of current buffer
  - ~G~ goto end of current buffer
- apply some operation to curent timeline
  - ~g~ retrieve new tweets of current timeline
  - ~r~ display replied tweets related to current tweet
  - ~C-C D~ delete the current tweet (if it is yours)
  - ~q~ kill current timeline buffer
- open another timeline
  - ~v~ open timelime at point
  - ~V~ open a various timeline by spec:
	- ~:home~
	- ~:mentions~
	- ~:public~
	- user
	- user/listname
	- ~:direct_messages~
	- ~:direct_messages_sent~
	- ~:favorites~
	- ~:favorites/~ user
	- #hashtag
	- ~:retweeted_by_me~
	- ~:retweeted_by_user/~ user
	- ~:retweeted_to_me~
	- ~:retweeted_to_user/~ user
	- ~:retweets_of_me~
	- ~:search/~ query-string ~/~  (inside query-string must escape
      slash and back-slash)
  - ~f~ switch to next timeline buffer
  - ~b~ switch to previous timeline buffer
- post a tweet
  - ~u~ or ~C-c C-s~ post a tweet
  - ~C-m~ post a reply to tweet at point
  - ~C-c C-m~ or ~C-c ENTER~ post non-official (organic) retweet of
	tweet at point
  - ~C-u C-c C-m~ or ~C-u C-c ENTER~ post official (native) retweet of
	tweet at point
  - ~d~ send a direct message
- invoke external browser
  - ~C-c C-v~ open user's page at point
- change display mode
  - ~a~ toggle automatic retrieval of current timeline
  - ~i~ toggle displaying icons of curent timeline
  - ~s~ toggle scroll mode for current timeline
  - ~t~ toggle proxy
- others
  - ~C-c C-t~ set current hashtag
  - ~C-c C-l~ post the message "Lambda is cute, lambda"
  - ~U~ push URL of current tweet to kill-ring
- key-bindings on edit mode
  - ~M-p~ replace tweet being edited with previous tweet on history
  - ~M-n~ replace tweet being edited with next tweet on history
  - ~<F4>~ shorten URL at point
  - ~C-c C-k~ cancel tweet being edited
  - ~C-c C-c~ post current tweet

#+BEGIN_SRC emacs-lisp
  (if (and
       (require 'twittering-mode nil :noerror)
       (shell-command "which gpg"))
      (setq got/twittering-mode-available t)
    (do
        (warn "not configuring twittering mode - need gnupg installed")
        (setq got/twittering-mode-available nil)))
      
#+END_SRC

*** Use master password

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-use-master-password t))
#+END_SRC

*** Establish initial timelines that are loaded

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-initial-timeline-spec-string
          '(":home"
            ":direct_messages")))
#+END_SRC

*** Use bitly for URL-shortening

#+BEGIN_SRC emacs-lisp
  (when got/twittering-mode-available
    (setq twittering-tinyurl-service 'bit.ly))
#+END_SRC

** undo-tree-mode
Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

Enable global undo tree mode if the package is available.  Trigger
visualiztion via ~C-x u~.  Exit by hitting "q" with desired node
active.

#+BEGIN_SRC emacs-lisp
  (when (require 'undo-tree nil 'noerror)
    (global-undo-tree-mode))
#+END_SRC

** whitespace-mode

Configure whitespace visualization.  Here is a breakdown of the
settings that I use.

These are the ~whitespace-style~ options.

| Option           | Description                                                                        |
|------------------+------------------------------------------------------------------------------------|
| face             | enable all visualization via faces                                                 |
| trailing         | trailing blanks are visualized via faces, if ~face~ present in ~whitespace-style~  |
| lines-tail       | lines which have columns beyond ~whitespace-line-column~ are highlighted via faces |
| space-before-tab | SPACEs before TAB visulized if ~indent-tabs-mode~ is non nil                       |
| indentation      | 8 or more SPACESs at beginning of line visualized if ~indent-tabs-mode~ non nil    |
| space-after-tab  | 8 or more SPACEs after TAB visualized if ~indent-tabs-mode~ is non nil             |

The ~whitespace-line-column~ setting specifies the column beyond which
the line is highlighted.  It is used only when ~whitespace-style~
includes ~lines~ or ~lines-tail~.  I have it set for 80 columns.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'whitespace)
    (setq whitespace-style '(
                             face
                             trailing
                             lines-tail
                             space-before-tab
                             indentation
                             space-after-tab
                             ))
    (setq whitespace-line-column 80))

#+END_SRC
** yasnippet-mode

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'yasnippet)
    (yas-global-mode))
#+END_SRC

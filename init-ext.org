* File Header
#+BEGIN_SRC emacs-lisp :padline no
  ;;; init-ext.el -- Automatically generated initialization file
  ;;;
  ;;; This file is generated from the init-ext.org file, so no edits
  ;;; should be made to this file directly.
  ;;;
  ;;; Commentary:
  ;;;
  ;;; See init-ext.org for complete documentation.
  ;;;
  ;;; Code:
  ;;;
  
#+END_SRC
* Load Private settings

These are things like email settings, etc.  I keep them in a file in my 
~emacs.d~ directory called ~.private.el~ and I do /not/ save this file in git.

#+BEGIN_SRC emacs-lisp
(setq got/private-settings
      (expand-file-name ".private.el" got/dotfiles-dir))
(when (file-exists-p got/private-settings)
  (load-file got/private-settings))
#+END_SRC
* Custom Settings File

Here I am specifying an alternate location for any custom settings.  This
helps keep my ~init.el~ file cleaner.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" got/dotfiles-dir))
#+END_SRC

* Library Paths

All configuration is stored under =got/dotfiles-dir= (=~/.emacs.d=).  
Meta-information files (backups, etc.) are stored in =got/metafiles-dir=.

#+BEGIN_SRC emacs-lisp
(setq got/metafiles-dir "~/.emacs-meta")
(unless (file-exists-p got/metafiles-dir)
       (make-directory got/metafiles-dir))
#+END_SRC

* Packages List

The table that follows this code block documents all of the packages
that I am currently using.  To update the list, just move the point
to anywhere inside the code block and type ~C-c C-c~ and answer "yes"
to the prompt.


#+BEGIN_SRC emacs-lisp :tangle no
  (defun got/gen-package-table ()
    "Generate a table of all installed packages, along with their descriptions"
    (cons '("_Package Name_" "_Package Description_")
    (sort
     (mapcar
      (lambda (pkg-desc)
        (list (car pkg-desc) (package-desc-doc (cdr pkg-desc))))
      package-alist)
     `(lambda (a b) (string-lessp (car a) (car b))))))
  
  (got/gen-package-table)
#+END_SRC

* Additional Paths

** Lisp

Add all top-level directories in =got/dotfiles-dir= to the load path.

#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Meta-Information

These variables are used to configure where other services store various files that
they create.

| Variable Name        | Description                 |
|----------------------+-----------------------------|
| got/meta-backup      | Location for backup files   |
| got/auto-save-prefix | Location for autosave files |


#+BEGIN_SRC emacs-lisp
  (defvar got/meta-backup 
    (expand-file-name "backups" got/metafiles-dir)
    "Location of backup files")
  (defvar got/auto-save-prefix
    (expand-file-name "autosaves/saves-" got/metafiles-dir)
    "Locations of autosave files")
#+END_SRC

* General Emacs Configuration

** Autosave Files

Configure the behaviour of Emacs auto-save.  Here we tell Emacs
where to put the autosave files.

#+BEGIN_SRC emacs-lisp
 (setq auto-save-list-file-prefix got/auto-save-prefix)
#+END_SRC

** Backup Files

Configure the behaviour of Emacs file backups.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p got/meta-backup)
    (make-directory got/meta-backup t))
  (setq backup-directory-alist `(("." . ,got/meta-backup)))
  (setq make-backup-files t           ; make backup of a file the first time it is saved
        backup-by-copying t           ; always use copying to create backup files
        version-control t             ; make numeric backups unconditionally
        delete-old-versions t         ; delete excess backup versions silently
        delete-by-moving-to-trash nil ; delete excess backup versions directly
        kept-old-versions 2           ; number of oldest versions to keep when new numbered backup made
        kept-new-versions 4           ; number of newest verions to keep when new numbered backup made
        auto-save-default t           ; do auto-saving of every file-visiting buffer
        auto-save-timeout 30          ; number of seconds idle time before auto-save
        auto-save-interval 300        ; number of input events between auto-saves
  )
#+END_SRC


* File Header
#+BEGIN_SRC emacs-lisp :padline no
  ;;; init-ext.el -- Automatically generated initialization file
  ;;;
  ;;; This file is generated from the init-ext.org file, so no edits
  ;;; should be made to this file directly.
  ;;;
  ;;; Commentary:
  ;;;
  ;;; See init-ext.org for complete documentation.
  ;;;
  ;;; Code:
  ;;;
  
#+END_SRC

* Packages List

The table that follows this code block documents all of the packages
that I am currently using.  To update the list, just move the point
to anywhere inside the code block and type ~C-c C-c~ and answer "yes"
to the prompt.


#+BEGIN_SRC emacs-lisp :tangle no
  (defun got/gen-package-table ()
    "Generate a table of all installed packages, along with their descriptions"
    (cons '("_Package Name_" "_Package Description_")
    (sort
     (mapcar
      (lambda (pkg-desc)
        (list (car pkg-desc) (package-desc-doc (cdr pkg-desc))))
      package-alist)
     `(lambda (a b) (string-lessp (car a) (car b))))))
  
  (got/gen-package-table)
#+END_SRC

#+RESULTS:
| _Package Name_                  | _Package Description_                                                              |
| auto-complete                   | Auto Completion for GNU Emacs                                                      |
| bind-key                        | A simple way to manage personal keybindings                                        |
| cask                            | Cask: Project management for Emacs package development                             |
| clojure-mode                    | Major mode for Clojure code                                                        |
| clojure-mode-extra-font-locking | Extra font-locking for Clojure mode                                                |
| concurrent                      | Concurrent utility functions for emacs lisp                                        |
| ctable                          | Table component for Emacs Lisp                                                     |
| dash                            | A modern list library for Emacs                                                    |
| deferred                        | Simple asynchronous functions for emacs lisp                                       |
| diminish                        | Diminished modes are minor modes with no modeline display                          |
| drag-stuff                      | Drag stuff (lines, words, region, etc...) around                                   |
| epc                             | A RPC stack for the Emacs Lisp                                                     |
| epl                             | Emacs Package Library                                                              |
| exec-path-from-shell            | Get environment variables such as $PATH from the shell                             |
| expand-region                   | Increase selected region by semantic units.                                        |
| f                               | Modern API for working with files and directories                                  |
| flx                             | fuzzy matching with good sorting                                                   |
| flx-ido                         | flx integration for ido                                                            |
| flycheck                        | Modern on-the-fly syntax checking for GNU Emacs                                    |
| flycheck-cask                   | Cask support in Flycheck                                                           |
| git-commit-mode                 | Major mode for editing git commit messages                                         |
| git-rebase-mode                 | Major mode for editing git rebase files                                            |
| helm                            | Helm is an Emacs incremental and narrowing framework                               |
| htmlize                         | Convert buffer text and decorations to HTML.                                       |
| idle-highlight-mode             | highlight the word the point is on                                                 |
| ido-ubiquitous                  | Use ido (nearly) everywhere.                                                       |
| ido-vertical-mode               | Makes ido-mode display vertically.                                                 |
| jedi                            | Python auto-completion for Emacs                                                   |
| magit                           | control Git from Emacs                                                             |
| multiple-cursors                | Multiple cursors for Emacs.                                                        |
| nyan-mode                       | Nyan Cat shows position in current buffer in mode-line.                            |
| org                             | Outline-based notes management and organizer                                       |
| package-build                   | Tools for assembling a package archive                                             |
| pallet                          | A package management tool for Emacs, using Cask.                                   |
| pkg-info                        | Information about packages                                                         |
| popup                           | Visual Popup User Interface                                                        |
| popwin                          | Popup Window Manager.                                                              |
| powerline                       | Rewrite of Powerline                                                               |
| prodigy                         | Manage external services from within Emacs                                         |
| projectile                      | Manage and navigate projects in Emacs easily                                       |
| python-environment              | virtualenv API for Emacs Lisp                                                      |
| s                               | The long lost Emacs string manipulation library.                                   |
| shut-up                         | Shut up would you!                                                                 |
| smartparens                     | Automatic insertion, wrapping and paredit-like navigation with user defined pairs. |
| smex                            | M-x interface with Ido-style fuzzy matching.                                       |
| use-package                     | A use-package declaration for simplifying your .emacs                              |
| web-mode                        | major mode for editing html templates                                              |
| yasnippet                       | Yet another snippet extension for Emacs.                                           |
* Utility Functions
** got/load-file-base-name

#+BEGIN_SRC emacs-lisp
  (defun got/load-file-base-name (directory base-name)
    "Look for files located in DIRECTORY whose base name is BASE-NAME.
  
  If BASE-NAME.org exists, load it via org-babel-laod-file
  Else if BASE-NAME.el exists, load it via load"
    (let ((org-file (expand-file-name (concat base-name ".org") directory))
          (lisp-file (expand-file-name  (concat base-name ".el") directory)))
      (cond
       ((file-exists-p org-file) (org-babel-load-file org-file))
       ((file-exists-p lisp-file) (load lisp-file)))))
  
#+END_SRC

** uconv

This is a great formula for working with spreadsheets.

#+BEGIN_SRC emacs-lisp
  (defmath uconv (expression new-units)
    "Perform unit conversion on a calc expression.

Example (calling from elisp - note having to prepend  'calcFunc-' 
to the function name):

    (calcFunc-uconv (calc-eval \"5.38 mi + 2500 m\" 'raw) \"mi\")

Here is a more complicated example that sums a column of distances and converts
the result to use miles (formatted to 2 decimal places):

    '(calcFunc-uconv (calc-eval (mapconcat 'identity (list @III..@IIII) \" + \") 'raw) \"mi\");%.2f mi

"
    (calc-eval
     (math-convert-units
      (calc-eval expression 'raw)
      (calc-eval new-units 'raw))))
#+END_SRC

* Custom Settings File

Here I am specifying an alternate location for any custom settings.  This
helps keep my ~init.el~ file cleaner.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" got/dotfiles-dir))
#+END_SRC
* Load Private settings

These are things like email settings, etc.  I keep them in a file in my 
~emacs.d~ directory called ~.private.el~ and I do /not/ save this file in git.

#+BEGIN_SRC emacs-lisp
(setq got/private-settings
      (expand-file-name ".private.el" got/dotfiles-dir))
(when (file-exists-p got/private-settings)
  (load-file got/private-settings))
#+END_SRC

* Load OS-specific Settings File

Path names, etc., will tend to vary from one operating system to
another.  Here we use the =system-type= variable to look for
initialization files named /<system-type>.org/ or /<system-type.el>/
and load them.

Note that on some systems there may be a ~/~ character in the value of
=system-type=; e.g., on Ubuntu the value is ~gnu/linux~, so we convert ~/~ to ~-~
and the file that we look for would be ~gnu-linux.org~ or ~gnu-linux.el~.

#+BEGIN_SRC emacs-lisp
  (let* ((system-name (symbol-name system-type))
         (base-name (replace-regexp-in-string "/" "-" system-name)))
    (got/load-file-base-name got/dotfiles-dir base-name))
                    
#+END_SRC

* Library Paths

All configuration is stored under =got/dotfiles-dir= (=~/.emacs.d=).  
Meta-information files (backups, etc.) are stored in =got/metafiles-dir=.

#+BEGIN_SRC emacs-lisp
(setq got/metafiles-dir "~/.emacs-meta")
(unless (file-exists-p got/metafiles-dir)
       (make-directory got/metafiles-dir))
#+END_SRC

* Additional Paths

Add all top-level directories in =got/dotfiles-dir= to the load path.

#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* Meta-Information

These variables are used to configure where other services store various files that
they create.

| Variable Name        | Description                                      |
|----------------------+--------------------------------------------------|
| got/meta-backup      | Location for backup files                        |
| got/auto-save-prefix | Location for autosave files                      |
| got/themes-dir       | Location for my custom themes                    |
| got/meta-ido         | file where id state is saved between invocations |
| got/ac-comphist-file | path to the auto complete history file           |


#+BEGIN_SRC emacs-lisp
  (defvar got/meta-backup 
    (expand-file-name "backups" got/metafiles-dir)
    "Location of backup files")
  (defvar got/auto-save-prefix
    (expand-file-name "autosaves/saves-" got/metafiles-dir)
    "Locations of autosave files")
  (defvar got/themes-dir
    (expand-file-name "themes" got/dotfiles-dir)
    "Location for my custom themes")
  (defvar got/meta-ido
    (expand-file-name "ido.last" got/metafiles-dir)
    "file where id state is saved between invocations")
#+END_SRC

* General Emacs Configuration
** Bind-Key
Require ~bind-key~ early so we can use it when configuring
other packages.

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
#+END_SRC
** Alarm Bell

The bell rings whenever (ding) is called.  Here we make if flash the frame
rather than make a sound (which I find annoying).

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Autocomplete 

#+BEGIN_SRC emacs-lisp
  (when (require 'auto-complete-config nil 'noerror)
    (ac-config-default)
      (setq ac-comphist-file
        (expand-file-name "ac-comphist.dat" got/metafiles-dir))
      (define-key ac-mode-map (kbd "S-TAB") 'auto-complete))

#+END_SRC

** Automatic indentation

Using ~C-j~ instead of ~RET~ normally runs the =newline-and-indent=
function.  Since this is so handy I remap ~RET~ to do this.

#+BEGIN_SRC emacs-lisp
(bind-key "RET" 'newline-and-indent)
#+END_SRC

** Autorevert mode

Automatically refert buffers when they change on disk.

#+BEGIN_SRC emacs-lisp
(setq global-auto-revert-mode 1)
#+END_SRC

** Autosave Files

Configure the behaviour of Emacs auto-save.  Here we tell Emacs
where to put the autosave files.

#+BEGIN_SRC emacs-lisp
 (setq auto-save-list-file-prefix got/auto-save-prefix)
#+END_SRC

** Backup Files

Configure the behaviour of Emacs file backups.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p got/meta-backup)
    (make-directory got/meta-backup t))
  (setq backup-directory-alist `(("." . ,got/meta-backup)))
  (setq make-backup-files t           ; make backup of a file the first time it is saved
        backup-by-copying t           ; always use copying to create backup files
        version-control t             ; make numeric backups unconditionally
        delete-old-versions t         ; delete excess backup versions silently
        delete-by-moving-to-trash nil ; delete excess backup versions directly
        kept-old-versions 2           ; number of oldest versions to keep when new numbered backup made
        kept-new-versions 4           ; number of newest verions to keep when new numbered backup made
        auto-save-default t           ; do auto-saving of every file-visiting buffer
        auto-save-timeout 30          ; number of seconds idle time before auto-save
        auto-save-interval 300        ; number of input events between auto-saves
  )
#+END_SRC

** Helm
This is a handy key-binding to use when you are in some detail help from a
helm session.  This will bring you back into the helm session.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'helm)
    (bind-key "C-c h" 'helm-resume)
    (require 'helm-misc)
    (bind-key "C-c M-x" 'helm-M-x)
    (bind-key "C-h a" 'helm-apropos)
    (bind-key "M-s a" 'helm-do-grep)
    (bind-key "M-s b" 'helm-occur)
    (bind-key "M-s F" 'helm-for-files))
#+END_SRC

** Ido

Enable ~ido-ubiquitous-mode~ if that package is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-ubiquitous)
    (ido-ubiquitous-mode 1))
#+END_SRC

Require ~flx-ido~ if it is available.

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flx-ido)
  (require 'flx-ido)
  (setq flx-ido-mode 1))
#+END_SRC

Enable ~ido-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
    (when (package-installed-p 'ido)
      (ido-mode t)
      (setq 
       ido-save-directory-list-file got/meta-ido    ; file where id state is saved between invocations
       confirm-nonexistent-file-or-buffer nil       ; Turn off annoying confirmation
       ido-case-fold t                              ; be case-insensitive
       ido-enable-last-directory-history t          ; remember latest selected directory name
       ido-max-work-directory-list 50               ; maximum number of working directories to record
       ido-max-work-file-list 50                    ; maximum number of names of recently opened files to record
       ido-use-filename-at-point nil                ; do not look for filename at point
       ido-use-url-at-point nil                     ; do not look for URL at point
       ido-enable-flex-matching nil                 ; do not try too hard to find matches
       ido-max-prospects 12                         ; max number of items in prospect list
       ido-create-new-buffer 'always                ; ido creates new buffer unconditionally
       ido-confirm-unique-completion t              ; even a unique confirmation must be confirmed
       )
  
    ;; enable ido for all buffer/file reading
    (ido-everywhere))
      
#+END_SRC

Enable ~ido-vertical-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-vertical-mode)
    (ido-vertical-mode 1))
#+END_SRC

** powerline

Powerline is a library for customizing the mode-line that is based on
the Vim Powerline. A collection of predefined themes comes with the
package.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'powerline)
    (powerline-default-theme)
    (which-function-mode 0))
#+END_SRC

** show-paren-mode

Enable matching of parenthesis globally.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Smex

[[http://www.emacswiki.org/emacs/Smex][Smex]] is a M-x enhancement for Emacs. Built on top of IDO, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'smex)
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    )
#+END_SRC

** Toolbar

Hide the toolbar when running in a window-system on a mac.  Otherwise enable it.

#+BEGIN_SRC emacs-lisp
  (if (equal window-system 'mac)
    (tool-bar-mode -1)
    (tool-bar-mode 1))
#+END_SRC

** Uniquify

The library [[http://www.emacswiki.org/emacs/uniquify][uniquify]] overrides Emacs’ default mechanism for making
buffer names unique (using suffixes like <2>, <3> etc.) with a more
sensible behaviour which use parts of the file names to make the
buffer names distinguishable.


#+BEGIN_SRC emacs-lisp
(when (require 'uniquify nil 'noerror)
  (setq uniquify-buffer-name-style 'forward))
#+END_SRC

** UTF-8 Settings

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8) ; set terminal output to utf-8
(set-keyboard-coding-system 'utf-8) ; set terminal input to utf-8
(prefer-coding-system 'utf-8)       ; set preferred coding to utf-8
#+END_SRC

* Theme Configuration

Load my default theme.

#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory got/themes-dir)
;; specifying the t option to load-theme prevents being asked about
;; loading an unsafe theme.
(load-theme 'gordy t)
#+END_SRC
* Mode-Specific Hooks and Configuration
** cider-mode

Really just a few notes here.  If you want to use /cider/ to connect
to a running ~lein repl~ session, you must make sure to update the
~project.clj~ file and add the following:

#+BEGIN_EXAMPLE
:plugins [[cider/cider-nrepl "0.7.0-SNAPSHOT"]]
#+END_EXAMPLE

If you do not you will get the following error:

#+BEGIN_EXAMPLE
Error: (error "Can't find nREPL middleware providing op \"stacktrace\".  
Please, install cider-nrepl 0.7.0-snapshot and restart CIDER")
#+END_EXAMPLE

If this does happen, you will want to kill the ~lein repl~ session.
This will allow Emacs to start accepting input again.

** org-mode

*** got/load-link-other-frame

Handy function that will load any kind of hyperlink that org understands
into a brand-new frame.

#+BEGIN_SRC emacs-lisp
(defun got/load-link-other-frame (hyperlink)
  "Load the specified HYPERLINK in frame called hyper-frame.
The function will create it if necessary and will re-use it if it already
exists.

EXAMPLE USAGE:

\(got/load-link-other-frame \"info:eintr#Writing%20Defuns\")"
  (interactive "sHyperlink: ")
  (save-excursion
    (let* ((newframe-name "hyper-frame")
           (newframe (car (filtered-frame-list
                          (lambda (f) (string= newframe-name (frame-parameter f 'name)))))))
      (select-frame
       (if newframe newframe (make-frame (list (cons 'name newframe-name)))))
      (org-open-link-from-string hyperlink))))

#+END_SRC

*** org-mode global key bindings

| function         | description                                                               |
| =org-store-link= | save an /org-link/ to the current location.  Insert later with ~C-c C-l~. |
| =org-capture=    | select capture template and insert in target location                     |
| =org-agenda=     | dispatch agenda command                                                   |
| =org-iswitchb=   | switch between org buffers                                                |

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** org-babel language support.  

By default only emacs-lisp is enabled.

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (ditaa . t)
     (plantuml . t)
     (clojure . t)
     (calc . t)
     (js . t)
     (lisp . t)
     (dot . t)
     (scheme . t)
     (sh . t)))

#+END_SRC

*** org-capture

Define basic /org-capture/ templates.  I currently have just one.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "TODO template" entry
           (file+headline org-default-notes-file "Inbox")
           "** TODO %?\n   CONTEXT: %a\n   OPENED: %U"
           )))
#+END_SRC

*** org-src-mode settings

This is a minor mode for language major mode buffers generated by org.
This minor mode is turned on in two situations:

- when editing a source code snippet with "C-c '".
- When formatting a source code snippet for export with htmlize.

#+BEGIN_SRC emacs-lisp
  (setq
   org-src-fontify-natively t      ; fontify code in code blocks
   srv-src-tab-acts-natively t     ; effect of TAB in code block as if issued in language major mode buffer
   )
#+END_SRC

** python-mode
*** flycheck-mode

Enable =flycheck-mode= when opening a Python buffer, if flycheck is available

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flycheck)
(add-hook 'python-mode-hook 'flycheck-mode))
#+END_SRC

*** jedi

[[http://tkf.github.io/emacs-jedi/latest/][jedi]] is a Python auto-completion package for Emacs. It aims at helping
your Python coding in a non-destructive way. It also helps you to find
information about Python objects, such as docstring, function
arguments and code location.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'jedi)
    (setq jedi:setup-keys t)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:setup))
  
#+END_SRC

** shift-select-mode

When non-nil, shifted motion keys activate the mark momentarily.

While the mark is activated in this way, any shift-translated point
motion key extends the region, and if Transient Mark mode was off, it
is temporarily turned on.  Furthermore, the mark will be deactivated
by any subsequent point motion key that was not shift-translated, or
by any action that normally deactivates the mark in Transient Mark mode.

The following setting disables the use of shift+arrows for mark.

#+BEGIN_SRC emacs-lisp
  (setq shift-select-mode nil)
#+END_SRC

** text-mode

Automatically enable auto fill mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

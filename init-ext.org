* File Header
#+BEGIN_SRC emacs-lisp :padline no
  ;;; init-ext.el -- Automatically generated initialization file
  ;;;
  ;;; This file is generated from the init-ext.org file, so no edits
  ;;; should be made to this file directly.
  ;;;
  ;;; Commentary:
  ;;;
  ;;; See init-ext.org for complete documentation.
  ;;;
  ;;; Code:
  ;;;
  
#+END_SRC

* Packages List

The table that follows this code block documents all of the packages
that I am currently using.  To update the list, just move the point
to anywhere inside the code block and type ~C-c C-c~ and answer "yes"
to the prompt.


#+BEGIN_SRC emacs-lisp :tangle no
  (defun got/gen-package-table ()
    "Generate a table of all installed packages, along with their descriptions"
    (cons '("_Package Name_" "_Package Description_")
    (sort
     (mapcar
      (lambda (pkg-desc)
        (list (car pkg-desc) (package-desc-doc (cdr pkg-desc))))
      package-alist)
     `(lambda (a b) (string-lessp (car a) (car b))))))
  
  (got/gen-package-table)
#+END_SRC

#+RESULTS:
| _Package Name_       | _Package Description_                                                              |
| bind-key             | A simple way to manage personal keybindings                                        |
| cask                 | Cask: Project management for Emacs package development                             |
| dash                 | A modern list library for Emacs                                                    |
| diminish             | Diminished modes are minor modes with no modeline display                          |
| drag-stuff           | Drag stuff (lines, words, region, etc...) around                                   |
| epl                  | Emacs Package Library                                                              |
| exec-path-from-shell | Get environment variables such as $PATH from the shell                             |
| expand-region        | Increase selected region by semantic units.                                        |
| f                    | Modern API for working with files and directories                                  |
| flx                  | fuzzy matching with good sorting                                                   |
| flx-ido              | flx integration for ido                                                            |
| flycheck             | Modern on-the-fly syntax checking for GNU Emacs                                    |
| flycheck-cask        | Cask support in Flycheck                                                           |
| git-commit-mode      | Major mode for editing git commit messages                                         |
| git-rebase-mode      | Major mode for editing git rebase files                                            |
| helm                 | Helm is an Emacs incremental and narrowing framework                               |
| htmlize              | Convert buffer text and decorations to HTML.                                       |
| idle-highlight-mode  | highlight the word the point is on                                                 |
| ido-ubiquitous       | Use ido (nearly) everywhere.                                                       |
| ido-vertical-mode    | Makes ido-mode display vertically.                                                 |
| magit                | control Git from Emacs                                                             |
| multiple-cursors     | Multiple cursors for Emacs.                                                        |
| nyan-mode            | Nyan Cat shows position in current buffer in mode-line.                            |
| package-build        | Tools for assembling a package archive                                             |
| pallet               | A package management tool for Emacs, using Cask.                                   |
| pkg-info             | Information about packages                                                         |
| popwin               | Popup Window Manager.                                                              |
| prodigy              | Manage external services from within Emacs                                         |
| projectile           | Manage and navigate projects in Emacs easily                                       |
| s                    | The long lost Emacs string manipulation library.                                   |
| shut-up              | Shut up would you!                                                                 |
| smartparens          | Automatic insertion, wrapping and paredit-like navigation with user defined pairs. |
| smex                 | M-x interface with Ido-style fuzzy matching.                                       |
| use-package          | A use-package declaration for simplifying your .emacs                              |
| web-mode             | major mode for editing html templates                                              |
| yasnippet            | Yet another snippet extension for Emacs.                                           |
* Utility Functions

These are just miscellaneous functions that are used later on.

#+BEGIN_SRC emacs-lisp
  (defun got/load-file-base-name (directory base-name)
    "Look for files located in DIRECTORY whose base name is BASE-NAME.
  
  If BASE-NAME.org exists, load it via org-babel-laod-file
  Else if BASE-NAME.el exists, load it via load"
    (let ((org-file (expand-file-name (concat base-name ".org") directory))
          (lisp-file (expand-file-name  (concat base-name ".el") directory)))
      (cond
       ((file-exists-p org-file) (org-babel-load-file org-file))
       ((file-exists-p lisp-file) (load lisp-file)))))
  
#+END_SRC

* Custom Settings File

Here I am specifying an alternate location for any custom settings.  This
helps keep my ~init.el~ file cleaner.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" got/dotfiles-dir))
#+END_SRC
* Load Private settings

These are things like email settings, etc.  I keep them in a file in my 
~emacs.d~ directory called ~.private.el~ and I do /not/ save this file in git.

#+BEGIN_SRC emacs-lisp
(setq got/private-settings
      (expand-file-name ".private.el" got/dotfiles-dir))
(when (file-exists-p got/private-settings)
  (load-file got/private-settings))
#+END_SRC

* Load OS-specific Settings File

Path names, etc., will tend to vary from one operating system to
another.  Here we use the =system-type= variable to look for
initialization files named /<system-type>.org/ or /<system-type.el>/
and load them.

Note that on some systems there may be a ~/~ character in the value of
=system-type=; e.g., on Ubuntu the value is ~gnu/linux~, so we convert ~/~ to ~-~
and the file that we look for would be ~gnu-linux.org~ or ~gnu-linux.el~.

#+BEGIN_SRC emacs-lisp
  (let* ((system-name (symbol-name system-type))
         (base-name (replace-regexp-in-string "/" "-" system-name)))
    (got/load-file-base-name got/dotfiles-dir base-name))
                    
#+END_SRC

* Library Paths

All configuration is stored under =got/dotfiles-dir= (=~/.emacs.d=).  
Meta-information files (backups, etc.) are stored in =got/metafiles-dir=.

#+BEGIN_SRC emacs-lisp
(setq got/metafiles-dir "~/.emacs-meta")
(unless (file-exists-p got/metafiles-dir)
       (make-directory got/metafiles-dir))
#+END_SRC

* Additional Paths

Add all top-level directories in =got/dotfiles-dir= to the load path.

#+BEGIN_SRC emacs-lisp
  (let ((default-directory user-emacs-directory))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* Meta-Information

These variables are used to configure where other services store various files that
they create.

| Variable Name        | Description                                      |
|----------------------+--------------------------------------------------|
| got/meta-backup      | Location for backup files                        |
| got/auto-save-prefix | Location for autosave files                      |
| got/themes-dir       | Location for my custom themes                    |
| got/meta-ido         | file where id state is saved between invocations |


#+BEGIN_SRC emacs-lisp
  (defvar got/meta-backup 
    (expand-file-name "backups" got/metafiles-dir)
    "Location of backup files")
  (defvar got/auto-save-prefix
    (expand-file-name "autosaves/saves-" got/metafiles-dir)
    "Locations of autosave files")
  (defvar got/themes-dir
    (expand-file-name "themes" got/dotfiles-dir)
    "Location for my custom themes")
  (defvar got/meta-ido
    (expand-file-name "ido.last" got/metafiles-dir)
    "file where id state is saved between invocations")
#+END_SRC

* General Emacs Configuration
** Bind-Key
Require ~bind-key~ early so we can use it when configuring
other packages.

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
#+END_SRC
** Alarm Bell

The bell rings whenever (ding) is called.  Here we make if flash the frame
rather than make a sound (which I find annoying).

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Autosave Files

Configure the behaviour of Emacs auto-save.  Here we tell Emacs
where to put the autosave files.

#+BEGIN_SRC emacs-lisp
 (setq auto-save-list-file-prefix got/auto-save-prefix)
#+END_SRC

** Backup Files

Configure the behaviour of Emacs file backups.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p got/meta-backup)
    (make-directory got/meta-backup t))
  (setq backup-directory-alist `(("." . ,got/meta-backup)))
  (setq make-backup-files t           ; make backup of a file the first time it is saved
        backup-by-copying t           ; always use copying to create backup files
        version-control t             ; make numeric backups unconditionally
        delete-old-versions t         ; delete excess backup versions silently
        delete-by-moving-to-trash nil ; delete excess backup versions directly
        kept-old-versions 2           ; number of oldest versions to keep when new numbered backup made
        kept-new-versions 4           ; number of newest verions to keep when new numbered backup made
        auto-save-default t           ; do auto-saving of every file-visiting buffer
        auto-save-timeout 30          ; number of seconds idle time before auto-save
        auto-save-interval 300        ; number of input events between auto-saves
  )
#+END_SRC

** Helm
This is a handy key-binding to use when you are in some detail help from a
helm session.  This will bring you back into the helm session.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'helm)
    (bind-key "C-c h" 'helm-resume)
    (require 'helm-misc)
    (bind-key "C-c M-x" 'helm-M-x)
    (bind-key "C-h a" 'helm-apropos)
    (bind-key "M-s a" 'helm-do-grep)
    (bind-key "M-s b" 'helm-occur)
    (bind-key "M-s F" 'helm-for-files))
#+END_SRC

** Ido

Enable ~ido-ubiquitous-mode~ if that package is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-ubiquitous)
    (ido-ubiquitous-mode 1))
#+END_SRC

Require ~flx-ido~ if it is available.

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flx-ido)
  (require 'flx-ido)
  (setq flx-ido-mode 1))
#+END_SRC

Enable ~ido-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
    (when (package-installed-p 'ido)
      (ido-mode t)
      (setq 
       ido-save-directory-list-file got/meta-ido    ; file where id state is saved between invocations
       confirm-nonexistent-file-or-buffer nil       ; Turn off annoying confirmation
       ido-case-fold t                              ; be case-insensitive
       ido-enable-last-directory-history t          ; remember latest selected directory name
       ido-max-work-directory-list 50               ; maximum number of working directories to record
       ido-max-work-file-list 50                    ; maximum number of names of recently opened files to record
       ido-use-filename-at-point nil                ; do not look for filename at point
       ido-use-url-at-point nil                     ; do not look for URL at point
       ido-enable-flex-matching nil                 ; do not try too hard to find matches
       ido-max-prospects 12                         ; max number of items in prospect list
       ido-create-new-buffer 'always                ; ido creates new buffer unconditionally
       ido-confirm-unique-completion t              ; even a unique confirmation must be confirmed
       )
  
    ;; enable ido for all buffer/file reading
    (ido-everywhere))
      
#+END_SRC

Enable ~ido-vertical-mode~ if it is available.

#+BEGIN_SRC emacs-lisp
  (when (package-installed-p 'ido-vertical-mode)
    (ido-vertical-mode 1))
#+END_SRC

** Toolbar

Hide the toolbar when running in a window-system on a mac.  Otherwise enable it.

#+BEGIN_SRC emacs-lisp
  (if (equal window-system 'mac)
    (tool-bar-mode -1)
    (tool-bar-mode 1))
#+END_SRC

* Theme Configuration

Load my default theme.

#+BEGIN_SRC emacs-lisp
(setq custom-theme-directory got/themes-dir)
;; specifying the t option to load-theme prevents being asked about
;; loading an unsafe theme.
(load-theme 'gordy t)
#+END_SRC
* Language-Specific Configuration
** Python

Enable =flycheck-mode= when opening a Python buffer, if flycheck is available

#+BEGIN_SRC emacs-lisp
(when (package-installed-p 'flycheck)
(add-hook 'python-mode-hook 'flycheck-mode))
#+END_SRC
